<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nikoleta E. Glynatsi</title>
    <description>Nikoleta E. Glynatsi
</description>
    <link>http://localhost:4000//</link>
    <atom:link href="http://localhost:4000//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 22 Oct 2018 00:28:03 +0100</pubDate>
    <lastBuildDate>Mon, 22 Oct 2018 00:28:03 +0100</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
      <item>
        <title>My experience of JupyterCon 2018.</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://jupyter.org/&quot;&gt;Project Jupyter&lt;/a&gt; is a non profit organisation created to
provide services for interactive computing across dozens of programming languages.
Project Jupyter is most known for their Jupyter Notebooks but develops and supports
several computing products, such as  JupyterHub and JupyterLab.&lt;/p&gt;

&lt;p&gt;JupyterCon is the official Jupyter conference organised by Project Jupyter,
&lt;a href=&quot;https://www.oreilly.com/&quot;&gt;O’Reilly Media&lt;/a&gt; and the &lt;a href=&quot;https://numfocus.org/&quot;&gt;NumFOCUS foundation&lt;/a&gt;.
JupyterCon 2018 took place in New York City on the 22th-24th of August at the Hilton hotel Midtown.
I was fortunate to be amongst  a list of selected PhD students, from different universities 
and disciplines, to have to been awarded a scholarship to travel all the way to
New York and attend JupyterCon 2018.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/jupyter_phd.jpg&quot; style=&quot;height: 60%; width: 80%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The event was divided in a day of tutorials followed by a two days of the main conference.
A diverse list of speakers were selected to provide their insights in their respective
fields in enterprise, research and education. This was my first Jupyter conference
and in this blog post I would like to share some of the things that I particularly
enjoyed about the conference!&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt; &lt;b&gt; Keynotes &lt;/b&gt; &lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;As many other conferences JupyterCon would start the day with a series of keynotes.
What made the keynotes different was that they were designed to last 10-15 min.
This is my first conference where the keynotes have been under 45 min and I can
say that I was positively surprised! We had the opportunity to listen to keynotes
from 14 different speakers and all had some fascinating stories to share with us.
These included talks delivered by &lt;a href=&quot;https://twitter.com/willingcarol?lang=en&quot;&gt;Carol Willing&lt;/a&gt;,
&lt;a href=&quot;https://twitter.com/cocteau?lang=en&quot;&gt;Mark Hansen&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/pacoid?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor&quot;&gt;Paco Nathan&lt;/a&gt;
the co-chair of JupyterCon and &lt;a href=&quot;https://twitter.com/fperez_org?lang=en&quot;&gt;Fernando Pérez&lt;/a&gt;
the founder of Project Jupyter.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/jupyter_keynote.jpg&quot; style=&quot;height: 60%; width: 80%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt; &lt;b&gt; Diversity &lt;/b&gt; &lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Jupyter is an umbrella,an umbrella that covers enterprise, research and education.
JupyterCon does not only seem aware of this but it embraced it with a schedule
that assured that there were tutorials and sessions to cover everyone’s interest!
The event’s schedule is published on the event’s website (&lt;a href=&quot;https://conferences.oreilly.com/jupyter/jup-ny/schedule/2018-08-21&quot;&gt;schedule&lt;/a&gt;).&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt; &lt;b&gt; Educational Track&lt;/b&gt; &lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;I spend most of my time in the educational track where I had the opportunity to
listen and learn how accomplished educators make use of Jupyter Project to teach
in new and interactive ways. The track included the &lt;em&gt;&lt;strong&gt;“The future of Jupyter ineducation”&lt;/strong&gt;&lt;/em&gt;
panel (lineup: Carol Willing, &lt;a href=&quot;https://twitter.com/ncclementi?lang=en&quot;&gt;Natalia Clementi&lt;/a&gt;,
&lt;a href=&quot;https://twitter.com/colliand?lang=en&quot;&gt;James Colliander&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/AllenDowney?lang=en&quot;&gt;Allen Downey&lt;/a&gt;,
&lt;a href=&quot;https://faculty.engineering.ucdavis.edu/moore/&quot;&gt;Jason Moore&lt;/a&gt; and
&lt;a href=&quot;https://www.pa.msu.edu/profile/caballero/&quot;&gt;Danny Caballero&lt;/a&gt;),  which discussed the
future of Jupyter in teaching and learning. There was also a &lt;em&gt;&lt;strong&gt;“Jupyter in education
discussion group”&lt;/strong&gt;&lt;/em&gt; where my group discussed best practices in education.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt; &lt;b&gt; Talks + Tutorials&lt;/b&gt; &lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;On the first day I attended a tutorial on &lt;em&gt;&lt;strong&gt;“Preparing your Jupyter notebook for
computationally reproducible publication: A hands-on BYONotebook tutorial for researchers”&lt;/strong&gt;&lt;/em&gt;
by &lt;a href=&quot;https://twitter.com/april_cs?lang=en&quot;&gt;April Clyburne-Sherin&lt;/a&gt;. April
specifically spoke about how this can be achieved using a cloud-based computational
reproducibility platform called: &lt;a href=&quot;https://codeocean.com/&quot;&gt;Code Ocean&lt;/a&gt;. April allowed
us to hold a conversation as a group. She managed to not lose a single person
throughout her tutorial and her colleagues were there to provide some technical
intuition and support.&lt;/p&gt;

&lt;p&gt;Some of the talks that I found particularly interesting were &lt;em&gt;&lt;strong&gt;“I don’t like notebooks”&lt;/strong&gt;&lt;/em&gt;
by &lt;a href=&quot;https://twitter.com/joelgrus&quot;&gt;Joel Grus&lt;/a&gt; who very rationally pointed out some
disadvantages of Jupyter Notebooks and why they do not fit his workflow and
&lt;em&gt;&lt;strong&gt;“Scheduled notebooks: A means for manageable and traceable code execution”&lt;/strong&gt;&lt;/em&gt;
delivered by &lt;a href=&quot;@codeseal&quot;&gt;Matthew Seal&lt;/a&gt;. Matthew spoke about how they are used at
&lt;a href=&quot;https://en.wikipedia.org/wiki/Netflix&quot;&gt;Netflix&lt;/a&gt;.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/jupytercon_tutorial.jpg&quot; style=&quot;height: 60%; width: 80%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Netflix was not the only industrial sponsor present to provide insights into their
work: here is a list of &lt;a href=&quot;https://conferences.oreilly.com/jupyter/jup-ny/public/content/sponsors&quot;&gt;sponsors&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that some the talks have been recorded and can be found on
O’Reilly’s youtube account:
&lt;a href=&quot;https://www.youtube.com/playlist?list=PL055Epbe6d5b572IRmYAHkUgcq3y6K3Ae&quot;&gt;https://www.youtube.com/playlist?list=PL055Epbe6d5b572IRmYAHkUgcq3y6K3Ae&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All in all, JuyterCon is a great conference that is not afraid to embrace all the
communities under its reach. One of the things proved to me by the conference is
that the community is aware of some issues, mainly on the side of reproducibility
and best practices. However, during the three days of the event there was a
constant open discussion amongst the attendees and the Project team, that I am
sure that is something they aim to improve upon and they already have, for example
with the release of JupyterLab.&lt;/p&gt;

&lt;p&gt;I am very much looking forward to JupyterCon 2019 and I would love to attend again.
There is so much room to learn but also to present several of the ideas that my
research group follows that I believe would be a beneficial addition! I would also
be very happy to see some lighting talks at next year’s conference (but that is
more of a selfish request).&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/JupyterCon.jpg&quot; style=&quot;height: 20%; width: 60%; object-fit: contain&quot; /&gt;
&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Sep 2018 00:00:00 +0100</pubDate>
        <link>http://localhost:4000//2018/09/jupytercon.html</link>
        <guid isPermaLink="true">http://localhost:4000//2018/09/jupytercon.html</guid>
        
        
      </item>
    
      <item>
        <title>The experience of Soapbox Science Cardiff 2018</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://soapboxscience.org/&quot;&gt;Soapbox Science&lt;/a&gt; 2018 took place in Cardiff on the
\(2^{nd}\) of June. The aim of the event is to promote STEM subjects
and more specifically the role of women by getting them to stand on a soapbox
and talk about their latest discoveries! This year the event was located outside
Cardiff Central Library and was once again a very successful outreach event.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/soap_box_2018.jpg&quot; style=&quot;height: 60%; width: 80%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;This year speakers covered a vast range of scientific fields such as Chemistry,
Biosciences, Engineering, Taxonomy, Earth Science and Mathematics. The list of speakers
can be found on the Soapbox Science Cardiff website:
(http://soapboxscience.org/soapbox-science-2018-cardiff/)[http://soapboxscience.org/soapbox-science-2018-cardiff/].&lt;/p&gt;

&lt;p&gt;The success of every event is due it’s volunteers and it’s organising committee.
The event had a large number of volunteers, both males and females, from PhD students,
to Postdocs and researchers at universities and in industry. The volunteers had a
full day schedule with various tasks throughout the day, including being Dylan the
Welsh Dragon, collecting feedback, counting footfall and inviting passer by.&lt;/p&gt;

&lt;p&gt;A huge thank you to the organisers Helen Obee Reardon, John McCrory, Hayley Wyatt,
Dhobasheni Newman and Jennifer Pike. You can follow the event on twitter &lt;a href=&quot;https://twitter.com/SS_Cardiff&quot;&gt;@SS_Cardiff&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally this year my department, the School of MATHS of Cardiff University, did not
fail to participate in the event. I myself have been one of this year’s speakers
and my PhD supervisor &lt;a href=&quot;https://twitter.com/drvinceknight&quot;&gt;Vince Knight&lt;/a&gt; was my assistant.
A total of five other PhD students volunteered for the day:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cardiff.ac.uk/people/research-students/view/967970-&quot;&gt;Emma Aspland&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cardiff.ac.uk/people/research-students/view/215430-Martina-Cracco&quot;&gt;Martina Cracco&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cardiff.ac.uk/people/research-students/view/98594-izanloo-hassan&quot;&gt;Hassan Izanloo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cardiff.ac.uk/people/research-students/view/505892-christopher-seaman&quot;&gt;Chris Seaman&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cardiff.ac.uk/people/research-students/view/967976-&quot;&gt;Emily Williams&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 05 Jun 2018 00:00:00 +0100</pubDate>
        <link>http://localhost:4000//2018/06/soapbox-science-feedback.html</link>
        <guid isPermaLink="true">http://localhost:4000//2018/06/soapbox-science-feedback.html</guid>
        
        
      </item>
    
      <item>
        <title>Resultants in SymPy</title>
        <description>&lt;p&gt;I have recently been doing some work related to systems of polynomial equations. This work
has lead me to study several academics papers on &lt;strong&gt;resultant theory&lt;/strong&gt;. In this blog
post I aim to give an introduction to resultant theory and a demonstration of
how we can use the Python package &lt;a href=&quot;http://www.sympy.org/en/index.html&quot;&gt;SymPy&lt;/a&gt;
to calculate the resultant of systems. I will end the blog post by describing the
particular contribution I’ve recently made to &lt;a href=&quot;http://www.sympy.org/en/index.html&quot;&gt;SymPy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To start of let us familiarise ourselves with some mathematical definitions
and I am going to use SymPy to demonstrate several examples.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sym&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Initially what is polynomial? Α &lt;strong&gt;polynomial&lt;/strong&gt; is an expression consisting of
variables and coefficients. Using the following code we can define the polynomials
\(f\) and \(g\) which are depended on a variable \(x\).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sym&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now a &lt;strong&gt;system of polynomial equations&lt;/strong&gt; is a set of simultaneous equations.
For example, the following two expressions compose a system of two polynomials
where both must equal 0.&lt;/p&gt;

&lt;p&gt;\[f(x) = 0\]
\[g(x) = 0\]&lt;/p&gt;

&lt;p&gt;We are interested in the values of \(x\) for which both equations \(f\) and \(g\)
simultaneously fall to zero. More superficially we are interested if values for
which all polynomials are nullified do exist! Though there are other methods for addressing
such problem here we consider the &lt;strong&gt;resultant&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The resultant of two polynomials is a polynomial expression of their coefficients,
which is equal to zero if and only if the polynomials have a common root.&lt;/p&gt;

&lt;p&gt;Several resultant formulations exist within the literature. One of the most common
ones is Sylvester’s resultant which is defined as the determinant of
&lt;a href=&quot;http://mathworld.wolfram.com/SylvesterMatrix.html&quot;&gt;Sylvester’s matrix&lt;/a&gt;. Sylvester’s
formulation is implemented within SymPy (&lt;a href=&quot;http://docs.sympy.org/latest/modules/polys/internals.html?highlight=sylvester&quot;&gt;docs&lt;/a&gt;)
and it can easily be calculated using a few lines of code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy.polys&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subresultants_qq_zz&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subresultants_qq_zz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sylvester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By calculating the determinant of Sylvester’s resultant we know that the
system has a common root. That is because the determinant is equal to 0.
The common root is for \(x=2\) which is trivial if we were to factorise
\(f\) and \(g\).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;det&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The resultant can do more than just assure us that systems do have roots. For
example when we have a system of 2 polynomial equations in two variables we can solve for one variable
where the second one is kept as a coefficient. This actually allow us to find the
roots of the system. That is also why the resultant is often refereed to as the
&lt;strong&gt;eliminator&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let’s consider another example where now \(f\) and \(g\) are also depended
on \(y\).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sym&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'y'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subresultants_qq_zz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sylvester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;              &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;              &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;det&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What we see is that in order for the system to have a common root, \(x\) must be \(\in \{-3, 0, 1\}\).
Now by substituting these values of \(x\), each at a time, in \(f\) and
\(g\) and repeat the process and find roots for \(y\).&lt;/p&gt;

&lt;p&gt;But what if we had a more generic system? Lets say a system of \(m\) polynomials in
\(n\) variables. Sylvester’s formulation would not be able to be applied to
such systems. For such systems we use &lt;strong&gt;multivariate resultants&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A number of multivariate resultants can be found in the literature. An example of a
multivariate resultant is &lt;a href=&quot;https://pdfs.semanticscholar.org/074d/652f97d07a2d5150764c2f448a6d98d3ab3b.pdf&quot;&gt;Dixon’s resultant&lt;/a&gt;.
Let us consider our final example with a 3 polynomial system dependent on
\(x\) and \(y\).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy.polys.multivariate_resultants&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DixonResultant&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DixonResultant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polynomials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;det&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Dixon’s resultant, the determinant of the matrix, is equal to zero. This indicates
that our system has indeed a common root.&lt;/p&gt;

&lt;p&gt;Multivariate resultants have many advantages. It allow us to know if a large
system has roots but moreover there are several ways the roots can be extract,
but we will not cover those, however this great paper does
&lt;a href=&quot;https://dl.acm.org/citation.cfm?id=220370&quot;&gt;Comparison of various multivariate resultant formulations&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Multivariate resultants were not implemented within SymPy until recently. I am very
happy to say that Dixon’s and &lt;a href=&quot;https://projecteuclid.org/euclid.chmm/1263317746&quot;&gt;Macaulay’s resultant&lt;/a&gt;
have been my first contribution to the library. Sympy is a great project that continuously
helps with me with my research and I am thrilled to have contributed to the project!&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Jun 2018 00:00:00 +0100</pubDate>
        <link>http://localhost:4000//2018/06/resultant-theory.html</link>
        <guid isPermaLink="true">http://localhost:4000//2018/06/resultant-theory.html</guid>
        
        
      </item>
    
      <item>
        <title>Soapbox Science Cardiff 2018</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://soapboxscience.org/&quot;&gt;Soapbox Science&lt;/a&gt; is an interactive public outreach
activity that aims to promote science to a public audience. More specifically, the
spotlight is on the role of women in STEM sciences aiming to promote their role
in these fields and reducing the gap between gender  inequalities.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/soapbox_2017.jpg&quot; style=&quot;height: 60%; width: 100%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;A list of passionate scientists are chosen every year to speak out about their
latest discoveries!  The event takes places in a public area and the format is
the one of the &lt;a href=&quot;https://www.royalparks.org.uk/parks/hyde-park/things-to-see-and-do/speakers-corner&quot;&gt;London Hyde Park’s Speaker’s Corner&lt;/a&gt;
and there is one single rule NO SLIDES.&lt;/p&gt;

&lt;p&gt;Soapbox Science events take place all around the UK. Last year it was the second
consecutive Cardiff event, which took place on Saturday the 10 of June 2017. I
was lucky enough to be informed about the event from my department and signed up
to be a volunteer alongside another MATHS Phd student, &lt;a href=&quot;https://www.cardiff.ac.uk/people/research-students/view/215430-Martina-Cracco&quot;&gt;Martina Cracco&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A total of 12 speakers covered a vast range of scientific fields such as Chemistry,
Astronomy, Engineering, Medicine, Earth and Ocean Sciences. The main event lasted
from 1-4pm and the day finished off with an amazing meal with everyone involved.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
 &lt;img src=&quot;/assets/images/soapbox_one.jpeg&quot; style=&quot;width: 45%; object-fit: contain&quot; /&gt;
 &lt;img src=&quot;/assets/images/soapbox_two.jpg&quot; style=&quot;width: 45%; object-fit: contain&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;This year, after a great discussion with my PhD supervisor
&lt;a href=&quot;http://vknight.org&quot;&gt;Vincent Knight&lt;/a&gt;, I decided to apply to be one of the speakers
for the 2018 event. The main reason behind it, was that I believe that mathematics
is a very misunderstood discipline. It is often described as too abstract and
theoretical and people are not always aware of its applications to real world
problems.&lt;/p&gt;

&lt;p&gt;Moreover, the discipline also suffers from gender inequality. For example, within
Cardiff University a very low number of women make it to postgraduate studies.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/women_in_maths_tweet.png&quot; style=&quot;height: 40%; width: 60%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;So I filled in my application and submitted it, and I am very happy to announce
that I am one of the 2018 speakers of &lt;a href=&quot;http://soapboxscience.org/soapbox-science-2018-cardiff/&quot;&gt;Soapbox Science Cardiff&lt;/a&gt;.
The event will be taking place on the &lt;strong&gt;2nd of June&lt;/strong&gt; at the &lt;strong&gt;Alliance Statue area&lt;/strong&gt;,
near the central library.&lt;/p&gt;

&lt;p&gt;So I would like to ask everyone that happens to be in Cardiff on the 2nd of June
to walk by and listen to, not just me, but to all of the amazing speakers that
will be there.  That would be greatly beneficial to the cause of Soapbox science!&lt;/p&gt;

&lt;p&gt;Moreover to everyone, (of any gender), that happens to be in Cardiff and wants to
be involved in a science event, you can fill a volunteering application
(as Martina and I did last year), which can be found on the &lt;a href=&quot;http://soapboxscience.org/soapbox-science-2018-cardiff/&quot;&gt;event’s website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope to see many of you there, hopefully the weather will be good and I am pretty
sure I will not fall from my box!&lt;/p&gt;
</description>
        <pubDate>Thu, 24 May 2018 00:00:00 +0100</pubDate>
        <link>http://localhost:4000//2018/05/soapbox-science-before.html</link>
        <guid isPermaLink="true">http://localhost:4000//2018/05/soapbox-science-before.html</guid>
        
        
      </item>
    
      <item>
        <title>Our experiences of PyConNA 2018.</title>
        <description>&lt;p&gt;by Nikoleta Glynatsi and Geraint Palmer.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/pycona2018.jpg&quot; style=&quot;height:80%; width: 100%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;This is a joint blog post with &lt;a href=&quot;http://www.geraintianpalmer.org.uk/&quot;&gt;Geraint Palmer&lt;/a&gt;
about our experiences of PyCon Namibia (&lt;a href=&quot;https://na.pycon.org/en/&quot;&gt;PyConNA&lt;/a&gt;) 2018,
which was was the \(4^{th}\) consecutive Python conference held in the country.
The conference took place in Windhoek, from the \(20^{th}\) to the \(22^{nd}\) of
February. Supported by &lt;a href=&quot;http://www.cardiff.ac.uk/phoenix-project&quot;&gt;Cardiff University’s Phoenix Project&lt;/a&gt;,
we an another colleague from the School of Mathematics (all &lt;a href=&quot;https://www.software.ac.uk/&quot;&gt;SSI&lt;/a&gt;
fellows), &lt;a href=&quot;https://twitter.com/drvinceknight&quot;&gt;Vincent Knight&lt;/a&gt;, travelled to this
beautiful country and attended one of the finest PyCon conferences we have attended.&lt;/p&gt;

&lt;p&gt;PyConNA 2018 :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;was a grand success of the local organising committee;&lt;/li&gt;
  &lt;li&gt;was the biggest Namibian Python conference to date;&lt;/li&gt;
  &lt;li&gt;had the largest number of local speakers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The international attendees came from a variety of different countries, including
Germany, Finland, Wales, England, Northern Ireland, Greece, Zimbabwe, Nigeria,
Ghana, South Africa, and America. The organising committee included three attendees
of the first Namibia Python conference, &lt;a href=&quot;https://twitter.com/JessicaUpani&quot;&gt;Jessica Upani&lt;/a&gt;,
&lt;a href=&quot;https://twitter.com/muheuenga&quot;&gt;Ngazetungue Muheue&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/ngatatuemate&quot;&gt;Ngatatue Mate&lt;/a&gt;,
University of Namibia lecturers &lt;a href=&quot;https://twitter.com/Shingapi&quot;&gt;Gabriel Nhinda&lt;/a&gt;,
&lt;a href=&quot;https://twitter.com/Stancia_Shipepe&quot;&gt;Annastasia Shipepe&lt;/a&gt;, and high school student
Queen Namene.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/pyconna_attendants.jpg&quot; style=&quot;float: left; height:20%; width: 39%; margin-right: 1%; margin-bottom: 0.5em;&quot; /&gt;
&lt;img src=&quot;/assets/images/organisers.jpg&quot; style=&quot;float: left; width: 59%; margin-right: 1%; margin-bottom: 0.5em;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;clear: both;&quot;&gt;
&lt;/p&gt;

&lt;p&gt;The conference was a great mixture of talks and workshops with each day concluding
with lightning talks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The workshops.&lt;/strong&gt; The first day was hosted a number of workshops, including the
very successful all day &lt;a href=&quot;https://djangogirls.org/&quot;&gt;Django Girls&lt;/a&gt; workshop.
Further workshops that took place include, &lt;em&gt;&lt;strong&gt;“Python for total beginners”&lt;/strong&gt;&lt;/em&gt; led
by Vernon Swanepoel, &lt;em&gt;&lt;strong&gt;“An introduction to Data Analysis with Jupyter”&lt;/strong&gt;&lt;/em&gt; led by
&lt;a href=&quot;https://twitter.com/marengz&quot;&gt;Tendai Marengereke&lt;/a&gt;, and &lt;em&gt;&lt;strong&gt;“Introduction to TDD
with Django”&lt;/strong&gt;&lt;/em&gt; led by &lt;a href=&quot;https://twitter.com/hjwp&quot;&gt;Harry Percival&lt;/a&gt;. Also 13 year
old Berhane Wheeler ran a remarkable workshop on building a guessing game in
Python and Daniele Procida led a workshop on how to organise a conference.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/django-girls-pyconna.jpg&quot; style=&quot;float: left; height:20%; width: 49%; margin-right: 1%; margin-bottom: 0.5em;&quot; /&gt;
&lt;img src=&quot;/assets/images/game-workshop-pyconna.jpg&quot; style=&quot;float: left; width: 49%; margin-right: 1%; margin-bottom: 0.5em;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;clear: both;&quot;&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The keynotes.&lt;/strong&gt; Two keynote talks were delivered by friends of the Namibian community
&lt;a href=&quot;https://twitter.com/AishaXBello&quot;&gt;Aisha Bello&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/marlene_zw&quot;&gt;Marlene Mhangami&lt;/a&gt;.
Aisha from Nigeria is an organiser of PyLadies and coach of Django Girls.
Aisha spoke about the community in Nigeria and the  inspiration she received from
attending PyCoNA which encouraged her to organise &lt;a href=&quot;https://twitter.com/pyconnigeria?lang=en&quot;&gt;PyCon Nigeria&lt;/a&gt;.
The second keynote was presented by Marlene. Marlene is from Zimbabwe, is a director
of the PSF and co founder of &lt;a href=&quot;https://www.zimbopy.com/&quot;&gt;ZimboPY&lt;/a&gt;. She spoke about
the growth of Python in African countries, from the first PyCon in South Africa
to the present day with a total of 5 different PyCons taking place on the continent
and many more local meetups and events.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/keynote-pyconna.jpg&quot; style=&quot;height: 40%; width: 60%; object-fit: contain&quot; /&gt;
&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
From left to right: Aisha Bello and Marlene Mhangami.
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The talks.&lt;/strong&gt; A great number of interesting talks were given this year. These
included a talk by Queen Namena on the creation and achievements of a school
group called PyNam Scholars. Godwin Nekongo talked about &lt;a href=&quot;https://www.pygame.org/news&quot;&gt;Pygame&lt;/a&gt;
and how it allowed him to create a block dodging game. Even seasoned gamers would
find this game tough to beat! Hasan Masood spoke about visualising data using
&lt;a href=&quot;https://pypi.python.org/pypi/gmplot/1.0.5&quot;&gt;gmplot&lt;/a&gt; on google maps. Gareth Lloyd
told the story of &lt;a href=&quot;https://en.wikipedia.org/wiki/John_Snow&quot;&gt;Jon Snow&lt;/a&gt; (not from
Game of Thrones) and the usefulness of &lt;a href=&quot;https://docs.djangoproject.com/en/2.0/ref/contrib/gis/&quot;&gt;GeoDjango&lt;/a&gt;,
&lt;a href=&quot;http://geopandas.org/&quot;&gt;GeoPandas&lt;/a&gt; and spatial plotting in Python. Vincent Knight
spoke about four different learning scenarios with different aims and the structures
he uses to teach programming at Cardiff University.&lt;/p&gt;

&lt;p&gt;Several other great talks were delivered, the program of the conference can be
found &lt;a href=&quot;https://na.pycon.org/en/programme/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our involvement.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nikoleta:&lt;/strong&gt; For the first day I was involved in the Django Girls workshop where
we ran a very successful workshop with over 20 attendants of different ages
accompanied by six coaches. Coaching at Django Girl Windhoek is a lovely experience
that I always look forward to. Similarly this year, I had the opportunity to teach
a number of young and passionate women. Additionally, I delivered a talk on using
Python and mathematics to study the behaviour of rhino poachers, a work that is
done mainly using one of my favourite libraries, SymPy. A pre print of this work
is available on arXiv: &lt;a href=&quot;https://arxiv.org/abs/1712.07640&quot;&gt;arXiv:1712.07640&lt;/a&gt;.
Finally, I have written a &lt;a href=&quot;https://nikoleta-v3.github.io/blog/2017/12/22/devaluation-of-rhino-horn.html&quot;&gt;blog post&lt;/a&gt;
that summarises the talk.&lt;/p&gt;

&lt;p&gt;This was my second PyConNA conference and I am hoping that it will not be the last
one. It truly was a great event and I would highly recommend anyone to get involved,
either by giving  talks, coaching django girls, or even running your own workshop.
PyCon offers a great opportunity to interact with the African programming community.
Be prepared to be amazed by the motivation and the hard work that is going on and
to enjoy a few days under  the sun.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Geraint:&lt;/strong&gt; Along with Vincent Knight we ran a workshop on using &lt;a href=&quot;http://www.sympy.org/en/index.html&quot;&gt;SymPy&lt;/a&gt;
for symbolic mathematics, entitled &lt;em&gt;&lt;strong&gt;“Python and Python and Maths, Oh My”&lt;/strong&gt;&lt;/em&gt;
(yes seriously). This was good fun, with SymPy enabling us to comfortably introduce
some advanced mathematical concepts to non-mathematicians in a relaxed setting.
A personal highlight for me was overhearing a group of high schoolers enthusiastically
discuss differentiation and optimisation using SymPy at a coffee break.&lt;/p&gt;

&lt;p&gt;I also gave a talk on &lt;a href=&quot;http://www.geraintianpalmer.org.uk/talks/AgentBasedModelling/index.html#/&quot;&gt;Agent Based Modelling with Python&lt;/a&gt;,
expanding on a &lt;a href=&quot;http://www.geraintianpalmer.org.uk/2017/08/19/schelling-segregation/&quot;&gt;blog post&lt;/a&gt;
where I recreated and experimented with a Python implementation of Schelling’s
segregation model. It was fun to show that a versatile tool such as Python can
help us gain insights into human behaviours.&lt;/p&gt;

&lt;p&gt;This was my fourth time at a Namibian Python conference, having attended the first
back in 2015, and it has been a privilege not only to see the conference and community
grow each year, but also seeing the growth of friends we had made four year ago.
When I first met Jessica she hadn’t programmed before, now she is chair of PyConNA,
teaches programming in schools, and coaches teams of high schoolers to win national
programming competitions! Kandoza and Muheue both gave their first ever PyCon
talks this year, both presenting technical skills to solve African problems
(Kandoza’s on interfacing Pandas and Excel, and Muheue’s on connecting Raspberry
Pi’s to computers).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/nikoleta-pyconna.jpg&quot; style=&quot;float: left; height:20%; width: 49%; margin-right: 1%; margin-bottom: 0.5em;&quot; /&gt;
&lt;img src=&quot;/assets/images/geraint-pyconna.jpg&quot; style=&quot;float: left; width: 49%; margin-right: 1%; margin-bottom: 0.5em;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;clear: both;&quot;&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/closing-pyconna.jpg&quot; style=&quot;height: 60%; width: 80%; object-fit: contain&quot; /&gt;
&lt;/p&gt;
</description>
        <pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate>
        <link>http://localhost:4000//2018/03/pycaonna.html</link>
        <guid isPermaLink="true">http://localhost:4000//2018/03/pycaonna.html</guid>
        
        
      </item>
    
      <item>
        <title>Choosing reviewers.</title>
        <description>&lt;p&gt;I recently came across the joy of submitting an article to a journal for publication.
I soon came to the conclusion that the process of submission is both exciting and
stressful. Exciting because you realise that a piece of research is finally done
but also stressful because you have to go through a check list and make sure
your paper fits the journal’s guidelines.&lt;/p&gt;

&lt;p&gt;Long story short, while doing this, one of the required fields
of the journal was to propose three possible reviewers. As an early career
researcher I do not exactly have a list of recommended reviewers up my sleeve.
Thus there were only two things I could really do:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Ask my co-authors for suggestions.&lt;/li&gt;
  &lt;li&gt;Write a script.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I knew that contacting my co-authors would take some time, thus option 2 was selected.
From here onwards, I will be using the programming language Python to explain a
series of steps that I followed in order to choose my reviewers!
The first thing needed was a list of potential reviewers. This was easily retrieved
from the journal’s website, so I copied it and saved it as a &lt;code class=&quot;highlighter-rouge&quot;&gt;txt&lt;/code&gt; file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'reviewers.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1273&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As it can be seen, the number of suggested reviewers from the journal is 1273.
That being a very large number of people to  check manually,  I needed to reduce
the list based on the reviewers’ area of research. My second task was to collect
data on my reviewers in order to gain insights in their research.&lt;/p&gt;

&lt;p&gt;For my second task I will be using my open source project called &lt;a href=&quot;https://github.com/ArcasProject/Arcas&quot;&gt;Arcas&lt;/a&gt;,
Arcas allows me to collect articles’ meta data by specifying just a single keyword.&lt;/p&gt;

&lt;p&gt;Using the following few lines of code I am able to collect up to 100 articles
that my reviewers have written and published in the journal &lt;a href=&quot;http://www.springer.com/gb/&quot;&gt;Springer&lt;/a&gt;.
Arcas allows you to ping 5 different sources but for the purpose of this work a
single source, more specifically Springer works just fine.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;arcas&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arcas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Springer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters_fix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;records&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_url_search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;raw_article&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;           &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;               &lt;span class=&quot;n&quot;&gt;articles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;               &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;art&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                   &lt;span class=&quot;n&quot;&gt;articles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_dataframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;art&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;               &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;articles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignore_index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;               &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;{}_{}.json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;           &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;               &lt;span class=&quot;n&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once the data has been collected I need to narrow down the reviewers that can
understand the science of my work or its applications. For my third task
I used the library &lt;a href=&quot;https://pandas.pydata.org/&quot;&gt;pandas&lt;/a&gt;
to check whether the keywords of my paper exist within any of the abstracts of
my reviewers’ articles.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keywords&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'keyword one'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'keyword two'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'keyword three'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find_reviewers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;authors_with_no_articles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;authors_of_interest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_author_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dropna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check_keyword_in_abstract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                    &lt;span class=&quot;n&quot;&gt;authors_of_interest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;authors_with_no_articles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authors_of_interest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authors_with_no_articles&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no_keep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find_reviewers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, I can  count the number of words each reviewer satisfied and plot a histogram!
Thus the potential reviewers of my paper are the people who rank first on the following
histogram.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
 &lt;img src=&quot;/assets/images/reviewers_hist.png&quot; style=&quot;height: 60%; width: 80%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;A manual check of the reviewers that stand out must be done as well. I am not
implying that one should strictly follow the histogram but it was a fast and
fun way of reducing a list of 1273 people down to 20.&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Jan 2018 00:00:00 +0000</pubDate>
        <link>http://localhost:4000//2018/01/choose-reviewers.html</link>
        <guid isPermaLink="true">http://localhost:4000//2018/01/choose-reviewers.html</guid>
        
        
      </item>
    
      <item>
        <title>The power of memory.</title>
        <description>&lt;p&gt;In game theory the game the &lt;a href=&quot;https://en.wikipedia.org/wiki/Prisoner%27s_dilemma&quot;&gt;prisoner’s dilemma&lt;/a&gt;
has been used since the 1950’s to study interactions. Such as biological and
social interactions. The prisoner’s dilemma is a two player non cooperative game
where:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Both players can choose to either &lt;strong&gt;Cooperate&lt;/strong&gt; or &lt;strong&gt;Defect&lt;/strong&gt; with each other.&lt;/li&gt;
  &lt;li&gt;Both players are better of choosing Cooperation and receive a payoff of \(3\).&lt;/li&gt;
  &lt;li&gt;Even so there is always a temptation for a player to Defect and gain a payoff of
\(5\).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This can be described by the game matrix:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/matrix.png&quot; style=&quot;height: 20%; width: 40%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In the 1980’s, a political scientist called Robert Axelrod carried out a
&lt;a href=&quot;https://science.sciencemag.org/content/211/4489/1390&quot;&gt;computer tournament&lt;/a&gt;
of the &lt;a href=&quot;https://www.investopedia.com/terms/i/iterated-prisoners-dilemma.asp&quot;&gt;iterated prisoner’s dilemma&lt;/a&gt;.
In the iterated version of the game the players interact for a finite number of
times and they are allowed access to the full history of the matches. Players
can choose the size of history which they are going to use in deciding their
next move.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/memory_one_power_of_memory.png&quot; style=&quot;height: 100%; width: 100%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In 2012 &lt;a href=&quot;https://www.pnas.org/content/109/26/10409.abstract&quot;&gt;Press and Dyson&lt;/a&gt;
studied the iterated prisoner’s dilemma and focused on strategies that made use
of the history of the previous round only. This set of strategies are called
&lt;strong&gt;memory one&lt;/strong&gt; strategies. When we only take into account a single turn of
the game there are only four possible states that our player could possibly be in.
These are \(CC, CD, DC\) and \(DD\).&lt;/p&gt;

&lt;p&gt;A memory one strategy is denoted by the probabilities of cooperating after
each of these states, \(p = (p_1, p_2, p_3, p_4) \in R_{[0,1]} ^ 4\).&lt;/p&gt;

&lt;p&gt;Press and Dyson found a way for a memory one opponent \(p\) to manipulate an
opponent \(q\) and they called these “manipulative” strategies, &lt;strong&gt;zero determinant&lt;/strong&gt; strategies.
Moreover, Press and Dyson stated that in a two player interaction,
a player playing a zero determinant strategy can outdo any longer memory strategy.
Concluding that in the iterated prisoner’s dilemma a longer memory size than 1
is not advantageous.&lt;/p&gt;

&lt;p&gt;The purpose of my project is to show that memory one strategies have limitations.
In order to achieve that I want to initially identify the best response
\(p^*=(p_1, p_2, p_3, p_4)\) to a strategy \(q\). In essence answering the
question:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is the best memory one strategy against a given other memory one strategy?&lt;/strong&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/against_one_player.png&quot; style=&quot;height: 20%; width: 30%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;A match between two memory one players \(p\) and \(q\) can be modelled as a
stochastic process, where the players move from state to  state. More specifically,
it can be modelled by the use of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Markov_chain&quot;&gt;Markov chain&lt;/a&gt;,
which is described by a matrix \(M\).&lt;/p&gt;

&lt;p&gt;\[M =
\begin{bmatrix}
    p_{1} q_{1} &amp;amp; p_{1} (- q_{1} + 1) &amp;amp; q_{1} (- p_{1} + 1) &amp;amp; (- p_{1} + 1) (- q_{1} + 1)
    \\
    p_{2} q_{3} &amp;amp; p_{2} (- q_{3} + 1) &amp;amp; q_{3} (- p_{2} + 1) &amp;amp; (- p_{2} + 1) (- q_{3} + 1)
    \\
    p_{3} q_{2} &amp;amp; p_{3} (- q_{2} + 1) &amp;amp; q_{2} (- p_{3} + 1) &amp;amp; (- p_{3} + 1) (- q_{2} + 1)
    \\
    p_{4} q_{4} &amp;amp; p_{4} (- q_{4} + 1) &amp;amp; q_{4} (- p_{4} + 1) &amp;amp; (- p_{4} + 1) (- q_{4} + 1)
    \\
\end{bmatrix}
\]&lt;/p&gt;

&lt;p&gt;Our players are assumed to move from each state until the system reaches a
state steady. Thus in order to calculate the utility of our players we
multiply the steady states of \(M\) with the payoffs of the game matrix.&lt;/p&gt;

&lt;p&gt;More specifically, the first result discussed here is that the utility of player
\(p\) against an opponent \(q\), denoted as \(u_q(p)\), can be
written in a compact way:&lt;/p&gt;

&lt;p&gt;\[u_q(p) = \frac{\frac{1}{2}p^TQ + c^Tp + a}
            {\frac{1}{2}p^T\bar{Q} + \bar{c}^Tp + \bar{a}}\]&lt;/p&gt;

&lt;p&gt;where \(Q, \bar{Q}\) are matrices of \(4 \times 4\), and \(c, \bar{c}\) are
\(4 \times 1\) vectors defined with the transition probabilities of the
opponent’s transition probabilities \(q_1, q_2, q_3, q_4\).&lt;/p&gt;

&lt;p&gt;Thus in order to answer our question, &lt;code class=&quot;highlighter-rouge&quot;&gt;what is the best memory one strategy against
a given other memory one strategy?&lt;/code&gt;, we need to consider the following optimization
problem:&lt;/p&gt;

&lt;p&gt;\[ max_{q}: u_q(p) \]
\[st: \ p \in\mathbb{R}_{[0,1]}^{4}\]&lt;/p&gt;

&lt;p&gt;Obtaining an analytical solution to this problem is not immediate. Thus in this
blog post and as a second part of my work I considered a constrained version of
the above problem. This was mainly done to get a better understanding of how to
tackle the bigger problem.&lt;/p&gt;

&lt;p&gt;More specifically, the constrained problem explored here is that of a set of memory one
strategies where the transition probabilities of each state are the same. These
are called &lt;strong&gt;purely random strategies&lt;/strong&gt; and can be denoted as \(p = (p, p, p, p)\).
Now our optimisation problem can be re-written as:&lt;/p&gt;

&lt;p&gt;\[ \max_p: u_q(p) = \frac{n_2p^2 + n_1p +n_0 } {d_1p + d_0}\]
\[ p_1 = p_2 = p_3 = p_4 = p \]
\[ \ 0 \leq p \leq 1 \]&lt;/p&gt;

&lt;p&gt;where \(n_2, n_1, n_0, d_1, d_0\) are constants defined with the transition
probabilities of the opponent’s transition probabilities \(q_1, q_2, q_3, q_4\).&lt;/p&gt;

&lt;p&gt;Determining \(p^*\) for a given \(q\) becomes simpler. It can be proven that
obtaining the optimal random behaviour \(p ^ *\) reduces to a search over a
small finite set. This is described by the following theorem:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Theorem 1. Optimisation of purely random player in a match&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The optimal behaviour of a purely random player \((p, p, p, p)\)
against a memory one opponent \(q\) is given by:&lt;/p&gt;

&lt;p&gt;\[p^* = \text{argmax}(u_q(p)), \ p \in S_q,\]&lt;/p&gt;

&lt;p&gt;where:&lt;/p&gt;

&lt;p&gt;\[S_q =  \{0, p_{\pm}, 1  | \begin{array}{l}  0 &amp;lt; p_{\pm} &amp;lt; 1, \\
p_{\pm} \neq \frac{-d_0}{d_1}  \end{array} \} \]&lt;/p&gt;

&lt;p&gt;and \(p_{\pm}\) are the roots of \(\frac{du}{dt}\).&lt;/p&gt;

&lt;p&gt;Computer trials have been performed to test the above theorem. The results are shown
in the figure below,&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/matches.png&quot; style=&quot;height: 50%; width: 60%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;This approach can also be expanded on to consider multiple players \(q^{(1)},
q^{(2)}, \dots ,q^{(N)} \) and obtaining the optimal random behaviour \(p ^ *\)
over a small finite set. In particularly this result is obtained by:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/against_multiple_players.png&quot; style=&quot;height: 20%; width: 30%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Theorem 2. Optimisation of purely random player in a tournament&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The optimal behaviour of a &lt;strong&gt;purely random&lt;/strong&gt; player \((p, p, p, p)\)
in an \(N-\)memory one player tournament, \({q_{(1)}, q_{(2)} \dots,q_{(N)} }\)
is given by:&lt;/p&gt;

&lt;p&gt;\[p^* = \text{argmax}(\displaystyle \sum_{i=1} ^ {N} {u_q}^{(i)} (p)), \ p \in S_{q(i)},\]&lt;/p&gt;

&lt;p&gt;where:&lt;/p&gt;

&lt;p&gt;\[ S_{q(i)} =  \overset{2N}{\underset{\lambda_i \neq \frac{do_i}{d1_i}}{\underset{i=1}{u}}}
\lambda_i \cup {0, 1} \]&lt;/p&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;\(\lambda_i\) are the eigenvalues of the &lt;a href=&quot;http://mathworld.wolfram.com/CompanionMatrix.html&quot;&gt;companion matrix&lt;/a&gt; of \(\frac{du_{q(i)}(p)}{dp}.\)&lt;/p&gt;

&lt;p&gt;Note the size of candidate solutions is \( 1 \leq|S_{q(i)}| \leq 2N + 2\).&lt;/p&gt;

&lt;p&gt;Computer trials have been also been run to test the above theorem. The results are
given by,&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/tournament.png&quot; style=&quot;height: 50%; width: 60%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Two things are captured by Theorem 2. Initially it can be seen that optimising
against the mean utility can not be captured by optimising against the mean opponent.
Secondly and more importantly it is shown that a strategy with memory greater
than 1 (evolved) out performs the optimal purely random player.&lt;/p&gt;

&lt;p&gt;This where the limitations of memory one lies. In interactions with multiple
opponent it can shown that having a larger memory, essentially being a bit
smarter, can be advantageous.&lt;/p&gt;

&lt;p&gt;The next step of this work, which is currently in progress, is to generalized both
theorems to memory one players! This will be done with the assistance of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Resultant&quot;&gt;resultant theory&lt;/a&gt;, which will allow me
to solve multivariate systems, but I will leave this for another blog post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;p.s.&lt;/strong&gt; This blog post accompanies my poster &lt;a href=&quot;https://nikoleta-v3.github.io/talks/posters//2018-01-08-SIAM/poster.pdf&quot;&gt;The power of memory&lt;/a&gt;
which was presented in the SIAM UKIE Annual Meeting 2018.&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Jan 2018 00:00:00 +0000</pubDate>
        <link>http://localhost:4000//2018/01/power-of-memory.html</link>
        <guid isPermaLink="true">http://localhost:4000//2018/01/power-of-memory.html</guid>
        
        
      </item>
    
      <item>
        <title>An Evolutionary Game Theoretic Model of Rhino Horn Devaluation.</title>
        <description>&lt;p&gt;Τhe name rhinoceros means `nose horn’ which is often shortened to rhino. The name
comes from the Greek words rhino (nose) and ceros (horn). There are five species
and 11 subspecies of rhino; some have two horns, while others have one
(&lt;a href=&quot;https://www.savetherhino.org/rhino_info/for_kids/everything_rhino&quot;&gt;source&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Unfortunately, rhino populations are at critical level today due to the demand
for rhino horn and subsequent poaching. The current rhino populations are mainly
gathered in large protected areas. Wildlife managers, the people in charge of these
protected areas, have been using several approaches to secure the life of the animals.
One of these approaches includes removing the horn itself; dehorning. Namibia was
the first country to use dehorning to protect rhinos from poaching
(&lt;a href=&quot;https://www.savetherhino.org/rhino_info/issues_for_debate/de-horning&quot;&gt;source&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;There are numerous cases where dehorning has proved insufficient to prevent rhinos
from falling victim to poachers. The efficacy is dependent on the behaviour of
the poachers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There can be `selective poachers’: will not hunt dehorned rhinos or&lt;/li&gt;
  &lt;li&gt;`indiscriminate poachers’: will kill any rhino, even dehorned rhinos have some
horn remaining and so have a small value.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The interaction between poachers and wildlife managers can be described using a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Game_theory&quot;&gt;game theoretic model&lt;/a&gt;. This work was
done in 2016 by &lt;a href=&quot;https://ora.ox.ac.uk/objects/uuid:d6c01110-1f53-4efe-88c7-10fc35efb3ac&quot;&gt;Tamsin Lee and David Roberts&lt;/a&gt;
and their game is given by the following matrix,&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/RhinoPic.png&quot; style=&quot;height: 40%; width: 60%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The game is a two players game (manager and poacher). Both player have a set of
two strategies. To dehorn or not and to either be selective or indiscriminate.
Assuming that both players will behave to maximise their payoff, there are three
possible Nash equilibriums of the game. In the 2016’s work the authors studied
the following two equilibriums:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;either all rhinos are devalued and all poachers are selective;&lt;/li&gt;
  &lt;li&gt;or all horns are intact and all poachers are indiscriminate.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Their work concludes that poachers will always choose to behave indiscriminately,
and thus the game settles to the bottom right quadrant, i.e., the poachers win!&lt;/p&gt;

&lt;p&gt;Their work though did not take into the population dynamic effect of these strategies.
For example in a population full of indiscriminate poachers would there be a benefit
for a poacher to behave selectively? In 2017, alongside one of the 2016’s work
authors Tamsin Lee, we further enhanced that model to allow for cross dependencies
across multiple poachers. The game we consider is no longer a two player game but
now the players are an infinite population of poachers. The dynamics of these
populations have been explored using &lt;a href=&quot;https://en.wikipedia.org/wiki/Evolutionary_game_theory&quot;&gt;evolutionary game&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are three possible population that could be stable. These are,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a population where everyone behave selectively;&lt;/li&gt;
  &lt;li&gt;a population where everyone behave indiscriminately;&lt;/li&gt;
  &lt;li&gt;a mixed population of poachers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is shown in figure below:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/evolutionary.png&quot; style=&quot;height: 80%; width: 100%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Using a realistic and generic utility model we tested the evolutionary stability
of these populations. The first set of results, both analytical and numerical,
showed that only the population of indiscriminate poachers is stable and further
more evolutionary stable. The figure below illustrates some of the numerical
experiments. It is shown that for any given starting population everyone converges
in an indiscriminately behaviour.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/IndiscriminateESS.png&quot; style=&quot;height: 100%; width: 100%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;However, our results reveal that it is possible for a population of selective
poachers to exist, but for this to occur a disincentive must be applied to the
utility of indiscriminate poachers. The disincentive factor can have several
interpretations; such as engaging the rural communities that live with wildlife.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/ESS-new-utility.png&quot; style=&quot;height: 100%; width: 100%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Essentially, our results for these model have shown that selective behaviour amongst
poachers is unstable unless there is a big incentive.&lt;/p&gt;

&lt;p&gt;The work described in this post has managed to be, in more details, developed
into an academic article. The article is now on a preprint server and under review
in order to be published. The preprint can be found on arXiv: &lt;a href=&quot;https://arxiv.org/abs/1712.07640&quot;&gt;https://arxiv.org/abs/1712.07640&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The source code for all the numerical experiments held are online and available
on Github: &lt;a href=&quot;https://github.com/drvinceknight/Evolutionary-game-theoretic-Model-of-Rhino-poaching&quot;&gt;https://github.com/drvinceknight/Evolutionary-game-theoretic-Model-of-Rhino-poaching&lt;/a&gt;.
Note that all source code has been developed using best practice, thus
the code has been properly documented and automatically tested.&lt;/p&gt;

&lt;p&gt;To finish off I would like to thank the co-authors for their support and explaining
to me that alpha is not a:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/t_e_lee&quot;&gt;Tamsin E. Lee&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/drvinceknight&quot;&gt;Vincent Knight&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 22 Dec 2017 00:00:00 +0000</pubDate>
        <link>http://localhost:4000//2017/12/devaluation-of-rhino-horn.html</link>
        <guid isPermaLink="true">http://localhost:4000//2017/12/devaluation-of-rhino-horn.html</guid>
        
        
      </item>
    
      <item>
        <title>Another side of Tit For Tat. Verifying an article from the 1980s.</title>
        <description>&lt;p align=&quot;justify&quot;&gt;
It has been almost one and a half years since I started working on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Prisoner%27s_dilemma&quot;&gt;prisoner's
dilemma&lt;/a&gt; (this is not a complaint) and I still get amazed by the
amount of information, insights and fun facts that I stumble upon;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The origin of the game goes all the way back to 1950;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Albert_W._Tucker&quot;&gt;Albert W. Tucker&lt;/a&gt;
the man behind the `prisoner’s’ story was the doctoral advisor of the
famous &lt;a href=&quot;https://en.wikipedia.org/wiki/John_Forbes_Nash_Jr.&quot;&gt;John Nash&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;the prisoner’s dilemma is not being used to model only human interactions
but animals as well, such as vampire bats and sticklebacks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;justify&quot;&gt;
When I started working on the game it was already decided that I was going
to follow the work of the political scientist &lt;a href=&quot;https://en.wikipedia.org/wiki/Robert_Axelrod&quot;&gt;
R. Axelrod&lt;/a&gt;.
Axelrod, as far as I know, is the first person to run a computer tournament
where machines were competing against each other in a prisoner’s dilemma
tournament. Axelrod’s work has received more than 30,000 citations to date
and many are familiar with his work and results. You might already know that,
but during the tournaments that Axelord performed the strategy that kept
attracting attention was a strategy called Tit For Tat.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
Tit for Tat is a much discussed strategy, submitted by
&lt;a href=&quot;https://en.wikipedia.org/wiki/Anatol_Rapoport&quot;&gt;Prof Anatol Rapoport&lt;/a&gt;
in the first tournament. Tit for Tat is an example of reciprocal altruism;
the strategy will always cooperate on the first round and then it will mimic
the opponent's previous move.
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/tit_for_tat_fsm.jpg&quot; style=&quot;height: 20%; width: 40%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
An example representation of the strategy using a finite state machine.
Transition arrows are labelled &lt;i&gt;O/P&lt;/i&gt; where &lt;i&gt;O&lt;/i&gt; is the opponent’s
last action and &lt;i&gt;P&lt;/i&gt; is the player’s response.&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
The success of Tit For Tat was soon known worldwide and several researchers
focused their work on the strategy ever since. But success often comes with
criticism. Axelrod's tournaments assumed that each player has perfect
information of the opponent's actions. In a real life situation this is
not always the case. Interactions often suffer from a measure of uncertainty.
This measure of uncertainty is called &lt;b&gt;noise&lt;/b&gt;. A probability that a strategy’s
action will flip.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
Let’s use &lt;a href=&quot;http://axelrod.readthedocs.io/&quot;&gt;Axelord Python library&lt;/a&gt;
to give an example.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;axelrod&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;players&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Defector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cooperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;players&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;players&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;turns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;players&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;players&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;turns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p align=&quot;justify&quot;&gt;
Defector and  Cooperator are deterministic strategies. Thus, their actions
are always known. In the example above, we can see that for each of the
ten turns, Defector will always defect and on the other hand Cooperator
always cooperates. This now changes once noise is introduced. The 5th,
7th and 10th actions of Cooperator have now flipped to be defections.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
When this stochasticity was introduced in the tournament environment the
performance of Tit for Tat was proven to suffer, especially against itself.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
Reading about the strategy I came across an article written in 1985 by P.
Molander, &lt;a href=&quot;https://www.jstor.org/stable/174244&quot;&gt;The Optimal Level
of Generosity in a Selfish, Uncertain Environment&lt;/a&gt;, who spoke about a
dark side of the strategy. Using Markovian modelling, Molander claimed
that if two strategies playing Tit for Tat meet in a noisy match the
average payoff that a strategy will receive will be the same as that of
a Random player (with probability 0.5 of cooperating).
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
Once again using the Axelrod library we can create the two matches and
test the hypothesis. More specifically, two matches for different values
of noise, ranging between 0 and 1 are performed. The first matches are
between two Tit for Tat strategies and the second between a Tit for Tat
and a Random(&lt;i&gt;p&lt;/i&gt;=0.5) player, as illustrated in the picture below.
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/spatial.jpg&quot; style=&quot;height: 30%; width: 60%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
 To create the matches we use the following code:
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noise_v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match_one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TitForTat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TitForTat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()],&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                        &lt;span class=&quot;n&quot;&gt;noise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;noise_v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;turns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result_one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match_one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match_two&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TitForTat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()],&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                        &lt;span class=&quot;n&quot;&gt;noise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;noise_v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;turns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result_two&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match_two&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p align=&quot;justify&quot;&gt;
After performing a number of these, the average score of the strategies
for each match is kept on record. By plotting the average scores, we can
test the hypothesis which is proven to hold.
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/tft_random.jpg&quot; style=&quot;height: 60%; width: 80%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
The strategy Tit for Tat and the importance of reciprocal behaviour have
been milestones in the field of the iterated prisoner’s dilemma. The results
of Axelrod’s initial tournaments have received criticism and a good argument
is that maybe the strategy was positively affected by its environment!
Including the list of opponents and the fact that noise was not taken into
account. The theoretical claim of Molander and the empirical proof show
that  the highly praised strategy Tit for Tat has disadvantages and that
it suffers a lot from them. For in a noisy environment the strategy is
not any better than a Random player!
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
To close off, I would like to highlight the usefulness of well written
research software! The Axelrod project allowed me to easily reproduce a
work which dates back to 1985 and give an empirical prove to a fascinating
fact!
&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Oct 2017 00:00:00 +0100</pubDate>
        <link>http://localhost:4000//2017/10/tit-for-tat-dark-side.html</link>
        <guid isPermaLink="true">http://localhost:4000//2017/10/tit-for-tat-dark-side.html</guid>
        
        
      </item>
    
      <item>
        <title>Python, Graphs and Game of Thrones</title>
        <description>&lt;p align=&quot;center&quot;&gt;
&lt;b&gt;(The following blog contains spoilers for the TV series Game of Thrones)&lt;/b&gt;
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
This blog post is based on a lightning  talk that I delivered earlier this
month in a PGR meeting at Cardiff University and it is about 3 things that
fascinate me! These are:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the programming language Python,&lt;/li&gt;
  &lt;li&gt;graph/network theory,&lt;/li&gt;
  &lt;li&gt;the book series a song of Ice and Fire.&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;justify&quot;&gt;
It is built upon the article
&lt;a href=&quot;https://www.maa.org/sites/default/files/pdf/Mathhorizons/NetworkofThrones%20%281%29.pdf&quot;&gt;
Networks of Thrones&lt;/a&gt;, by Andrew Beveridge and Jie Shan. In their work
they created a network for each of the five books in the series of
&lt;a href=&quot;http://www.georgerrmartin.com/book-category/&quot;&gt;a song of Ice and Fire&lt;/a&gt;.
Each node of the network corresponds to a character whose name (or nickname)
is mentioned within the book.  If two character names (or nicknames) appeared
within 15 words an edge is added to connect these two characters. An edge
weight was also applied based on the number of interactions of the characters.
The data is open and accessible on
&lt;a href=&quot;https://github.com/mathbeveridge/asoiaf&quot;&gt;Beveridge’s Github profile&lt;/a&gt;.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
Once I got my hands on these data sets I decided to go ahead and perform
a very brief analysis. For now I will consider only the first book of the
series, a &lt;a href=&quot;https://en.wikipedia.org/wiki/A_Game_of_Thrones&quot;&gt;Game of Thrones&lt;/a&gt;.
Using the Python library &lt;a href=&quot;http://pandas.pydata.org/&quot;&gt;pandas&lt;/a&gt;
I load the data of the first book using the following command:


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_game_of_thrones&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/data/asoiaf-book1-edges.csv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_game_of_thrones&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Source&lt;/span&gt;                          &lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt;              &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;	    &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;Addam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Marbrand&lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;Jaime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lannister&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;Undirected&lt;/span&gt;	&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;	&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;Addam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Marbrand&lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;Tywin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lannister&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;Undirected&lt;/span&gt;	&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;	&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;Aegon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Targaryen&lt;/span&gt;               &lt;span class=&quot;n&quot;&gt;Daenerys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Targaryen&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;Undirected&lt;/span&gt;	&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;	&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;Aegon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Targaryen&lt;/span&gt;               &lt;span class=&quot;n&quot;&gt;Eddard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stark&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;Undirected&lt;/span&gt;	&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;	&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;Aemon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Targaryen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Maester&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Aemon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Alliser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thorne&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;Undirected&lt;/span&gt;	&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;	&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


&lt;p align=&quot;justify&quot;&gt;
Now that the data has been loaded all I have to do is create the network.
For that I will make use of another Python library specialising in the
creation and manipulation of networks, called &lt;a href=&quot;https://networkx.github.io/&quot;&gt;networkx&lt;/a&gt;.
Thus, creating the graph becomes trivial:
&lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;networkx&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_game_of_thrones&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterrows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Source'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Target'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'weight'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'book'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


&lt;p align=&quot;justify&quot;&gt;
Networkx allow us to study the network structure and provides several
analysis measures. The first question that arises is &lt;b&gt; who is the
central character of a Game of Thrones?&lt;/b&gt;
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
In graph theory and network analysis, this can be thought as the most
central node. In order to verify the most central characters several
centrality measures, available within networkx, will be used.
&lt;b&gt; Degree centrality&lt;/b&gt;, corresponds to the number of links connecting
it to another node.
&lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;central_characters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;degree_centrality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;central_characters&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


&lt;p align=&quot;justify&quot;&gt;
The code above returns a list of tuples with the name of the ten most
central characters based on degree centrality. Thereupon, I will be using
the library &lt;a ref=&quot;http://matplotlib.org/#&quot;&gt;matplotlib&lt;/a&gt; to illustrate
the results.
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/degree_centrality.jpg&quot; style=&quot;height: 60%; width: 80%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
Based on degree centrality, &lt;a href=&quot;http://gameofthrones.wikia.com/wiki/Eddard_Stark&quot;&gt;
Eddard Stark&lt;/a&gt; appears to be the central character followed by
&lt;a href=&quot;http://gameofthrones.wikia.com/wiki/Robert_Baratheon&quot;&gt;Robert Baratheon
&lt;/a&gt;, &lt;a href=&quot;http://gameofthrones.wikia.com/wiki/Tyrion_Lannister&quot;&gt;
Tyrion Lannister&lt;/a&gt;, &lt;a href=&quot;http://gameofthrones.wikia.com/wiki/Catelyn_Stark&quot;&gt;
Catelyn Stark&lt;/a&gt; and &lt;a href=&quot;http://gameofthrones.wikia.com/wiki/Jon_Snow&quot;&gt;
Jon Snow&lt;/a&gt;. But several measures exist, what is the difference in
value between them?
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
Let us look at a second measure the &lt;b&gt;betweenness centrality&lt;/b&gt;, both weighted
and unweighted. The betweenness centrality for each node is the number of
the shortest paths that pass through the node.
&lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;betweenness_unweighted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;betweenness_centrality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                                 &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;betweenness_weighted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;betweenness_centrality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'weight'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                               &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;



&lt;p align=&quot;justify&quot;&gt;
The new bar plots with the importance of the top 10 characters are now given
below. Though the unweighted betweenness centrality seems to have no difference
to that of the degree centrality, several characters change rank based on
the weighted version of the measure. Now Robert Baratheon stands out to
be the most important character, &lt;a href=&quot;http://gameofthrones.wikia.com/wiki/Robb_Stark&quot;&gt;
Robb Stark&lt;/a&gt; is suddenly found in fourth place and once again Tyrion
Lannister is third.
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/betweeness_unweighted.jpg&quot; style=&quot;height: 60%; width: 80%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/betweeness.jpg&quot; style=&quot;height: 60%; width: 80%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
Still not convinced about the characters' importance? A third measure is
examined, that is the &lt;a href=&quot;https://www.sci.unich.it/~francesc/teaching/network/pagerank&quot;&gt;
Pagerank centrality&lt;/a&gt;, which is a centrality measured originally used by Google.
&lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_rank_unweighted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pagerank_numpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                               &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_rank_weighted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pagerank_numpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'weight'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                             &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/pagerank_unweighted.jpg&quot; style=&quot;height: 60%; width: 80%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/pagerank.jpg&quot; style=&quot;height: 60%; width: 80%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
It can be seen that different measures may have a different story to tell.
The measure which is more appropriate always depends on the researcher
and the question that is being answered. In my research I often find
myself altering between these measures for different projects.
Thus unfortunately a general rule can not be applied. But based on the
three measures that have been examined a character that is frequently ranked
first is the honourable Eddard Stark! Having read the book and watched
the TV series it is safe to argue that Eddard Stark is in fact the most
central character of the book A Game of Thrones or season 1.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
These insight though are just for a single book of the series and we know
that not many characters make it far in the series. Could we use the measures
to gain insights on &lt;b&gt;the progression of a character?&lt;/b&gt; The answer is yes.
After loading the rest of the books the weighted betweenness centrality
is used to gain the centrality of each character for each book.
&lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;measures&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;betweenness_centrality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'weight'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G_book2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G_book3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G_book4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G_book5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;evol_df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_records&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;evolution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fillna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


&lt;p align=&quot;justify&quot;&gt;
This data frame contains more characters whose name we can remember and
a bunch of people do end up dead so let’s get ahead and look at the top
5 ranked characters and plot just their progress.
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/progress.jpg&quot; style=&quot;height: 60%; width: 80%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
Grumpy old man &lt;a href=&quot;http://gameofthrones.wikia.com/wiki/Stannis_Baratheon&quot;&gt;
Stannis Baratheon&lt;/a&gt; is a very minor character in the first book but
that changed during the series, him claiming that he is the King and
going around setting people on fire. Two other characters that developed
over time have been Jon Snow and &lt;a href=&quot;http://gameofthrones.wikia.com/wiki/Daenerys_Targaryen&quot;&gt;
Daenerys Targaryen&lt;/a&gt;, both characters appear less in the fourth book
where the minor character &lt;a href=&quot;http://gameofthrones.wikia.com/wiki/Balon_Greyjoy&quot;&gt;
Balon Greyjoy suddenly &lt;/a&gt;
appears from the sea. This is because the fourth book focuses on the War
of the Five Kings, what’s left of it, and the &lt;a href=&quot;http://gameofthrones.wikia.com/wiki/Iron_Islands&quot;&gt;
Iron islands&lt;/a&gt;.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
An efficient way of illustrating all the connections between our characters
throughout the series is by drawing a comprehensive network.
Can networkx be used for visualization?
Well, no. At least not for such big networks as it can be seen here,
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/network.jpg&quot; style=&quot;height: 80%; width: 100%; object-fit: contain&quot; /&gt;
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
Networkx is a tool, for analysis and not for visualization, though it
works very well with software that specialise on visualising networks,
so no hard feelings.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
This has been a very brief analysis, and mainly I would like to illustrate
how Python and mathematics can be used. A song of Ice and a Fire is a
book series that I enjoy but I am sure all the above are applicable to
other titles as well.
&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;
The authors of Network of Thrones have performed their own analysis which
can be found in their &lt;a href=&quot;https://www.maa.org/sites/default/files/pdf/Mathhorizons/NetworkofThrones%20%281%29.pdf&quot;&gt;
website&lt;/a&gt;, and I would also like to give credits
to a &lt;a href=&quot;https://www.youtube.com/watch?v=iTOC8TQrF_U&quot;&gt;
NetworkX workshop&lt;/a&gt; I attended recently at EurosciPy for the inspiration
for my lightning talk and blog post.
&lt;/p&gt;
&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Oct 2017 00:00:00 +0100</pubDate>
        <link>http://localhost:4000//2017/10/python-graphs-got.html</link>
        <guid isPermaLink="true">http://localhost:4000//2017/10/python-graphs-got.html</guid>
        
        
      </item>
    
  </channel>
</rss>
